
=========================================
========== Models and Schemata ==========
=========================================


# ---- Group

class Group(Base):
     __tablename__ = 'groups_group'
     id = Column(Integer, primary_key=True)
     name = Column(StringTypes.MEDIUM_STRING, nullable=False)
     description = Column(StringTypes.LONG_STRING, nullable=False)
     active = Column(Boolean, nullable=False, default=True)
     manager_id = Column(Integer, ForeignKey('people_manager.id'), nullable=False)

        def __repr__(self):
            return f"<Group(id={self.id})>"
    

class GroupSchema(Schema):
     id = fields.Integer(dump_only=True, required=True, validate=Range(min=1))
     name = fields.String(required=True, validate=Length(min=1))
     description = fields.String(required=True, validate=Length(min=1))
     active = fields.Boolean(required=True)
     manager_id = fields.Integer(data_key='managerId', required=True)

# ---- Meeting

class Meeting(Base):
     __tablename__ = 'groups_meeting'
     id = Column(Integer, primary_key=True)
     when = Column(Datetime, nullable=False)
     group_id = Column(Integer, ForeignKey('groups_group.id'), nullable=False)
     address_id = Column(Integer, ForeignKey('places_address.id'))
     group = relationship('Group', backref='meetings', lazy=True)
     address = relationship('Address', backref='meetings', lazy=True)

        def __repr__(self):
            return f"<Meeting(id={self.id})>"
    

class MeetingSchema(Schema):
     id = fields.Integer(dump_only=True, required=True, validate=Range(min=1))
     when = fields.DateTime(required=True)
     group_id = fields.Integer(data_key='groupId', required=True)
     address_id = fields.Integer(data_key='addressId')

# ---- Member

class Member(Base):
     __tablename__ = 'groups_member'
     id = Column(Integer, primary_key=True)
     joined = Column(Date, nullable=False)
     active = Column(Boolean, nullable=False, default=True)
     group_id = Column(Integer, ForeignKey('groups_group.id'), nullable=False)
     person_id = Column(Integer, ForeignKey('people_person.id'), nullable=False)
     group = relationship('Group', backref='members', lazy=True)
     person = relationship('Person', backref='memberships', lazy=True)

        def __repr__(self):
            return f"<Member(id={self.id})>"
    

class MemberSchema(Schema):
     id = fields.Integer(dump_only=True, required=True, validate=Range(min=1))
     joined = fields.Date(required=True)
     active = fields.Boolean(required=True)
     group_id = fields.Integer(data_key='groupId', required=True)
     person_id = fields.Integer(data_key='personId', required=True)

# ---- Attendance

class Attendance(Base):
     __tablename__ = 'groups_attendance'
     meeting_id = Column(Integer, ForeignKey('groups_meeting.id'), primary_key=True)
     member_id = Column(Integer, ForeignKey('groups_member.id'), primary_key=True)

        def __repr__(self):
            return f"<Attendance(meeting_id={self.meeting_id},member_id={self.member_id})>"
    

class AttendanceSchema(Schema):
     meeting_id = fields.Integer(dump_only=True, data_key='meetingId', required=True)
     member_id = fields.Integer(dump_only=True, data_key='memberId', required=True)

==========================
========== APIs ==========
==========================


# ---- Group

group_schema = GroupSchema()

@groups.route('/groups', methods=['POST'])
@jwt_required
def create_group():
    try:
        valid_group = group_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 422

    new_group = Group(**valid_group)
    db.session.add(new_group)
    db.session.commit()
    return jsonify(group_schema.dump(new_group)), 201
    

@groups.route('/groups')
@jwt_required
def read_all_groups():
    result = db.session.query(Group).all()
    return jsonify(group_schema.dump(result, many=True))
    

@groups.route('/groups/<group_id>')
@jwt_required
def read_one_group(group_id):
    result = db.session.query(Group).filter_by(id=group_id).first()
    return jsonify(group_schema.dump(result))
    

@groups.route('/groups/<group_id>', methods=['PUT'])
@jwt_required
def replace_group(group_id):
    pass
    

@groups.route('/groups/<group_id>', methods=['PATCH'])
@jwt_required
def update_group(group_id):
    try:
        valid_group = group_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 422

    group = db.session.query(Group).filter_by(id=group_id).first()

    for key, val in valid_group.items():
        setattr(group, key, val)

    db.session.commit()
    return jsonify(group_schema.dump(group))
    

@groups.route('/groups/<group_id>', methods=['DELETE'])
@jwt_required
def delete_group(group_id):
    pass
    

# ---- Meeting

meeting_schema = MeetingSchema()

@groups.route('/meetings', methods=['POST'])
@jwt_required
def create_meeting():
    try:
        valid_meeting = meeting_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 422

    new_meeting = Meeting(**valid_meeting)
    db.session.add(new_meeting)
    db.session.commit()
    return jsonify(meeting_schema.dump(new_meeting)), 201
    

@groups.route('/meetings')
@jwt_required
def read_all_meetings():
    result = db.session.query(Meeting).all()
    return jsonify(meeting_schema.dump(result, many=True))
    

@groups.route('/meetings/<meeting_id>')
@jwt_required
def read_one_meeting(meeting_id):
    result = db.session.query(Meeting).filter_by(id=meeting_id).first()
    return jsonify(meeting_schema.dump(result))
    

@groups.route('/meetings/<meeting_id>', methods=['PUT'])
@jwt_required
def replace_meeting(meeting_id):
    pass
    

@groups.route('/meetings/<meeting_id>', methods=['PATCH'])
@jwt_required
def update_meeting(meeting_id):
    try:
        valid_meeting = meeting_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 422

    meeting = db.session.query(Meeting).filter_by(id=meeting_id).first()

    for key, val in valid_meeting.items():
        setattr(meeting, key, val)

    db.session.commit()
    return jsonify(meeting_schema.dump(meeting))
    

@groups.route('/meetings/<meeting_id>', methods=['DELETE'])
@jwt_required
def delete_meeting(meeting_id):
    pass
    

# ---- Member

member_schema = MemberSchema()

@groups.route('/members', methods=['POST'])
@jwt_required
def create_member():
    try:
        valid_member = member_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 422

    new_member = Member(**valid_member)
    db.session.add(new_member)
    db.session.commit()
    return jsonify(member_schema.dump(new_member)), 201
    

@groups.route('/members')
@jwt_required
def read_all_members():
    result = db.session.query(Member).all()
    return jsonify(member_schema.dump(result, many=True))
    

@groups.route('/members/<member_id>')
@jwt_required
def read_one_member(member_id):
    result = db.session.query(Member).filter_by(id=member_id).first()
    return jsonify(member_schema.dump(result))
    

@groups.route('/members/<member_id>', methods=['PUT'])
@jwt_required
def replace_member(member_id):
    pass
    

@groups.route('/members/<member_id>', methods=['PATCH'])
@jwt_required
def update_member(member_id):
    try:
        valid_member = member_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 422

    member = db.session.query(Member).filter_by(id=member_id).first()

    for key, val in valid_member.items():
        setattr(member, key, val)

    db.session.commit()
    return jsonify(member_schema.dump(member))
    

@groups.route('/members/<member_id>', methods=['DELETE'])
@jwt_required
def delete_member(member_id):
    pass
    

# ---- Attendance

attendance_schema = AttendanceSchema()

@groups.route('/attendance', methods=['POST'])
@jwt_required
def create_attendance():
    try:
        valid_attendance = attendance_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 422

    new_attendance = Attendance(**valid_attendance)
    db.session.add(new_attendance)
    db.session.commit()
    return jsonify(attendance_schema.dump(new_attendance)), 201
    

@groups.route('/attendance')
@jwt_required
def read_all_attendance():
    result = db.session.query(Attendance).all()
    return jsonify(attendance_schema.dump(result, many=True))
    

@groups.route('/attendance/<attendance_id>')
@jwt_required
def read_one_attendance(attendance_id):
    result = db.session.query(Attendance).filter_by(id=attendance_id).first()
    return jsonify(attendance_schema.dump(result))
    

@groups.route('/attendance/<attendance_id>', methods=['PUT'])
@jwt_required
def replace_attendance(attendance_id):
    pass
    

@groups.route('/attendance/<attendance_id>', methods=['PATCH'])
@jwt_required
def update_attendance(attendance_id):
    try:
        valid_attendance = attendance_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 422

    attendance = db.session.query(Attendance).filter_by(id=attendance_id).first()

    for key, val in valid_attendance.items():
        setattr(attendance, key, val)

    db.session.commit()
    return jsonify(attendance_schema.dump(attendance))
    

@groups.route('/attendance/<attendance_id>', methods=['DELETE'])
@jwt_required
def delete_attendance(attendance_id):
    pass
    

===========================
========== Tests ==========
===========================


# ---- Group


@pytest.mark.xfail()
def test_create_group(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_read_all_groups(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_read_one_group(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_replace_group(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_update_group(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_delete_group(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

# ---- Meeting


@pytest.mark.xfail()
def test_create_meeting(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_read_all_meetings(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_read_one_meeting(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_replace_meeting(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_update_meeting(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_delete_meeting(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

# ---- Member


@pytest.mark.xfail()
def test_create_member(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_read_all_members(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_read_one_member(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_replace_member(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_update_member(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_delete_member(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

# ---- Attendance


@pytest.mark.xfail()
def test_create_attendance(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_read_all_attendance(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_read_one_attendance(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_replace_attendance(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_update_attendance(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    

@pytest.mark.xfail()
def test_delete_attendance(client, db):
    # GIVEN
    # WHEN
    # THEN
    assert True == False
    
